package com.health.hl.params;import java.util.List;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattService;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.os.IBinder;import android.util.Log;import com.health.hl.app.App;import com.health.hl.service.RFStarBLEService;/* * 蓝牙设备的基类 *         功能： *           1）保存设备属性 *           2）获取设备属性 *           3）结束服务，断开连接 *           4）获取服务 *           5）监视广播的属性 *            * @author xavi *  */public abstract class BLEDevice {	Intent serviceIntent;	protected Context context = null;	public boolean isConnect = false;	public String deviceName = null, deviceMac = null;	public RFStarBLEService bleService = null;	public BluetoothDevice device = null;	public RFStarBLEBroadcastReceiver delegate = null;	private boolean registerflag=false;	private boolean bindflag=false;//	private BluetoothSocket socket;	public BLEDevice(Context context, BluetoothDevice device) {		this.device = device;		this.deviceName = this.device.getName();		this.deviceMac = this.device.getAddress();		this.context = context;		this.registerReceiver();		if (serviceIntent == null) {			serviceIntent = new Intent(this.context.getApplicationContext(),					RFStarBLEService.class);			this.context.getApplicationContext().bindService(serviceIntent,					serviceConnection, Context.BIND_AUTO_CREATE);		}			}	/**	 * 设置连接，绑定服务	 */	public void setBLEBroadcastDelegate(RFStarBLEBroadcastReceiver delegate) {		this.delegate = delegate;	}	/**	 * 连接服务	 */	private ServiceConnection serviceConnection = new ServiceConnection() {		@Override		public void onServiceDisconnected(ComponentName name) {			// TODO Auto-generated method stub			bleService = null;			Log.i(App.TAG,					"onServiceDisconnected gatt is onServiceDisconnected");		}		@Override		public void onServiceConnected(ComponentName name, IBinder service) {			// TODO Auto-generated method stub			// Log.d(BLEApp.KTag, "55 serviceConnected :   服务启动 ");			bleService = ((RFStarBLEService.LocalBinder) service).getService();			bleService.initBluetoothDevice(device);			Log.i(App.TAG, "onServiceConnected gatt 正在初始化服务");		}	};	/**	 * 获取特征值	 * 	 * @param characteristic	 */	public void readValue(BluetoothGattCharacteristic characteristic) {		if (characteristic == null) {			Log.i(App.TAG, "55555555555 readValue characteristic is null");		} else {			bleService.readValue(this.device, characteristic);			Log.i(App.TAG, "特征值读取成功  : " + characteristic.getUuid().toString());		}	}	/**	 * 根据特征值写入数据	 * 	 * @param characteristic	 */	public void writeValue(BluetoothGattCharacteristic characteristic) {		if (characteristic == null) {			Log.i(App.TAG, "********特征值为空");		} else {			Log.i(App.TAG, "特征值写入成功  : " + characteristic.getUuid().toString());			bleService.writeValue(this.device, characteristic);		}	}	/**	 * 消息使能	 * 	 * @param characteristic	 * @param enable	 */	public void setCharacteristicNotification(BluetoothGattService bluetoothGattService,			BluetoothGattCharacteristic characteristic, boolean enable) {		if (characteristic == null) {			Log.w(App.TAG, "55555555555 Notification characteristic is null");		} else {			// 设置当指定characteristic值变化时，发出通知。			Log.i("消息使能", "消息使能设置成功！！！！！！！");//			bleService.setCharacteristicNotification(this.device,//					characteristic, enable);			bleService.setCharacteristicNotification(this.device,bluetoothGattService.getUuid(),					characteristic.getUuid(), enable);		}	}	/**	 * 断开连接	 */	public void disconnectedDevice() {		if (bleService!=null) {			bleService.disconnect(device);		}		if (registerflag) {			context.unregisterReceiver(gattUpdateRecevice);			registerflag = false;		}		if (bleService!=null) 		{			context.unbindService(serviceConnection);			bleService = null;			}	}	/**	 * 销毁设备	 */	public void closeDevice() {		this.ungisterReceiver();		this.context.unbindService(serviceConnection);	}	/**	 * 获取服务	 * 	 * @return	 */	public List<BluetoothGattService> getBLEGattServices() {		return this.bleService.getSupportedGattServices(this.device);	}	/**	 * 监视广播的属性	 * 	 * @return	 */	protected IntentFilter bleIntentFilter() {		final IntentFilter intentFilter = new IntentFilter();		intentFilter.addAction(RFStarBLEService.ACTION_GATT_CONNECTED);		intentFilter.addAction(RFStarBLEService.ACTION_GATT_DISCONNECTED);		intentFilter				.addAction(RFStarBLEService.ACTION_GATT_SERVICES_DISCOVERED);		intentFilter.addAction(RFStarBLEService.ACTION_DATA_AVAILABLE);		intentFilter.addAction(RFStarBLEService.ACTION_GAT_RSSI);		intentFilter.addAction(RFStarBLEService.ACTION_GATT_CONNECTING);		return intentFilter;	}	public interface RFStarBLEBroadcastReceiver {		/**		 * 监视蓝牙状态的广播 macData蓝牙地址的唯一识别码		 */		public void onReceive(Context context, Intent intent, String macData,				String uuid);	}	/**	 * 注册监视蓝牙设备（返回数据的）广播	 * 	 * @param context	 * @param delegate	 * @param filter	 */	public void registerReceiver() {//		Intent mIntent = new Intent(context,RFStarBLEService.class);//		context.startService(mIntent);		this.context.registerReceiver(gattUpdateRecevice,				this.bleIntentFilter());		registerflag = true;	}	/**	 * 注销监视蓝牙返回的广播	 */	public void ungisterReceiver() {		if(registerflag)		{			this.context.unregisterReceiver(gattUpdateRecevice);			registerflag = false;		}	}	/**	 * 初始化服务中的特征	 */	protected abstract void discoverCharacteristicsFromService();	// private int countDisconted = 0; // 计算重连的次数	/**	 * 接收蓝牙广播	 */	private BroadcastReceiver gattUpdateRecevice = new BroadcastReceiver() {		@Override		public void onReceive(final Context context, Intent intent) {			// TODO Auto-generated method stub			String characteristicUUID = intent					.getStringExtra(RFStarBLEService.RFSTAR_CHARACTERISTIC_ID);			if (RFStarBLEService.ACTION_GATT_CONNECTED.equals(intent					.getAction())) {				isConnect = true;				Log.i(App.TAG, " connect is succed");			} else if (RFStarBLEService.ACTION_GATT_DISCONNECTED.equals(intent					.getAction())) {				isConnect = false;				Log.i(App.TAG, "---------已断开链接");				if (bleService != null && device != null)					disconnectedDevice();				Log.i(App.TAG, "ACTION_GATT_DISCONNECTED");			} else if (RFStarBLEService.ACTION_GATT_SERVICES_DISCOVERED					.equals(intent.getAction())) {			} else if (RFStarBLEService.ACTION_DATA_AVAILABLE.equals(intent					.getAction())) {				Log.i(App.TAG, "---------进来了ACTION_DATA_AVAILABLE");				if (intent.getByteArrayExtra(RFStarBLEService.EXTRA_DATA) == null) {					Log.i(App.TAG, "---------无数据返回");					return;				}			}			String address = device.getAddress();			if (delegate != null)				delegate.onReceive(context, intent, address, characteristicUUID);		}	};	/**	 * 显式创建服务	 * @param context	 * @param implicitIntent	 * @return	 *///	public static Intent getExplicitIntent(Context context, Intent implicitIntent) {//        // Retrieve all services that can match the given intent//        PackageManager pm = context.getPackageManager();//        List<ResolveInfo> resolveInfo = pm.queryIntentServices(implicitIntent, 0);//        // Make sure only one match was found//        if (resolveInfo == null || resolveInfo.size() != 1) {//            return null;//        }//        // Get component info and create ComponentName//        ResolveInfo serviceInfo = resolveInfo.get(0);//        String packageName = serviceInfo.serviceInfo.packageName;//        String className = serviceInfo.serviceInfo.name;//        ComponentName component = new ComponentName(packageName, className);//        // Create a new intent. Use the old one for extras and such reuse//        Intent explicitIntent = new Intent(implicitIntent);//        // Set the component to be explicit//        explicitIntent.setComponent(component);//        return explicitIntent;//    }}