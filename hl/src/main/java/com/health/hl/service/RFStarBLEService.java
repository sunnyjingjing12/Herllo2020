package com.health.hl.service;import java.util.ArrayList;import java.util.List;import java.util.UUID;import android.annotation.SuppressLint;import android.app.Service;import android.bluetooth.BluetoothDevice;import android.bluetooth.BluetoothGatt;import android.bluetooth.BluetoothGattCallback;import android.bluetooth.BluetoothGattCharacteristic;import android.bluetooth.BluetoothGattDescriptor;import android.bluetooth.BluetoothGattService;import android.bluetooth.BluetoothProfile;import android.content.Intent;import android.os.Binder;import android.os.IBinder;import android.util.Log;import com.health.hl.app.App;/* * 管理蓝牙的服务  * 			功能：  *			    1) 连接蓝牙设备 *				2) 管理连接状态 *				3) 获取蓝牙设备的相关服务 * * @author xavi *  */public final class RFStarBLEService extends Service {	public final static String TAG = "bleservice";	public final static String ACTION_GATT_CONNECTED = "com.sayes.balance.service.ACTION_GATT_CONNECTED";	public final static String ACTION_GATT_CONNECTING = "com.sayes.balance.service.ACTION_GATT_CONNECTING";	public final static String ACTION_GATT_DISCONNECTED = "com.sayes.balance.service.ACTION_GATT_DISCONNECTED";	public final static String ACTION_GATT_SERVICES_DISCOVERED = "com.sayes.balance.service.ACTION_GATT_SERVICES_DISCOVERED";	public final static String ACTION_DATA_AVAILABLE = "com.sayes.balance.service.ACTION_DATA_AVAILABLE";	public final static String EXTRA_DATA = "com.sayes.balance.service.EXTRA_DATA";	public final static String ACTION_GAT_RSSI = "com.sayes.balance.service.RSSI";	public final static String RFSTAR_CHARACTERISTIC_ID = "com.sayes.balance.service.characteristic"; // 唯一标识	private BluetoothDevice mDevice;	private final IBinder kBinder = new LocalBinder();	private static ArrayList<BluetoothGatt> arrayGatts = new ArrayList<BluetoothGatt>(); // 存放BluetoothGatt的集合	private static final UUID CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID = UUID			.fromString("00002902-0000-1000-8000-00805f9b34fb");// 00002902-0000-1000-8000-00805f9b34fb	@Override	public IBinder onBind(Intent intent) {		// TODO Auto-generated method stub		return kBinder;	}	@Override	public boolean onUnbind(Intent intent) {		// TODO Auto-generated method stub		return super.onUnbind(intent);	}	/**	 * 初始化BLE 如果已经连接就不用再次连接	 * 	 * @param bleDevice	 * @return	 */	public boolean initBluetoothDevice(BluetoothDevice device) {		mDevice = device;		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt != null) {//			if (gatt.connect()) {//				// 已经连接上//				Log.i(TAG, "当前连接的设备同address mac : "//						+ gatt.getDevice().getAddress() + "  连接上  数量: "//						+ arrayGatts.size());////			} else {//				return false;//			}//			return true;			gatt.close();			arrayGatts.remove(gatt);		}		Log.i(TAG, "****" + device.getName() + ": 蓝牙设备正准备连接");		// this.connect(device);		gatt = device.connectGatt(this, false, bleGattCallback);		//gatt.connect();		arrayGatts.add(gatt);		return true;	}	/**	 * 断开连接	 */	public void disconnect(BluetoothDevice device) {		BluetoothGatt gatt = getBluetoothGatt(device);		if (gatt == null) {			Log.i(TAG, "kBluetoothGatt 不能断开连接");			return;		}		gatt.disconnect();//		gatt.disconnect();//		gatt.disconnect();//		gatt.close();//		arrayGatts.remove(gatt);		Log.i(TAG, "------成功断开连接");	}	/**	 * 连接防丢器	 * 	 * @return	 */	public boolean connect(BluetoothDevice device) {		mDevice = device;		return initBluetoothDevice(device); // 写到这，无法打 cancelOpen	}	public class LocalBinder extends Binder {		public RFStarBLEService getService() {			return RFStarBLEService.this;		}	}	private final BluetoothGattCallback bleGattCallback = new BluetoothGattCallback() {		/*		 * 连接的状发生变化 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onConnectionStateChange(android		 * .bluetooth.BluetoothGatt, int, int)		 */		@Override		public void onConnectionStateChange(BluetoothGatt gatt, int status,				int newState) {			String action = null;			Log.i("onConnectionStateChange",					"onConnectionStateChange---status=" + status);			if (newState == BluetoothProfile.STATE_CONNECTED) {				action = ACTION_GATT_CONNECTED;//gatt.connect();//                try {//////                    gatt.discoverServices();//                    Thread.sleep(500);                    gatt.discoverServices();//                } catch (InterruptedException e) {//                    // TODO Auto-generated catch block//                    e.printStackTrace();//                }			} else if (newState == BluetoothProfile.STATE_DISCONNECTED) {				action = ACTION_GATT_DISCONNECTED;//                try {    				gatt.close();//                    Thread.sleep(500);//    				gatt.close();//                } catch (InterruptedException e) {//                    // TODO Auto-generated catch block//                    e.printStackTrace();//                }//				gatt.close();			}			if (action != null && !action.equals("")) {				broadcastUpdate(action);			}		}		/*		 * 搜索device中的services (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onServicesDiscovered(android		 * .bluetooth.BluetoothGatt, int)		 */		@Override		public void onServicesDiscovered(BluetoothGatt gatt, int status) {			Log.i(TAG, "搜索蓝牙设备服务: " + status);			if (status == BluetoothGatt.GATT_SUCCESS) {				broadcastUpdate(ACTION_GATT_SERVICES_DISCOVERED);			} else {				Log.i(TAG, "搜索服务失败: " + status);			}		}		@Override		public void onCharacteristicWrite(BluetoothGatt gatt,				BluetoothGattCharacteristic characteristic, int status) {			// TODO Auto-generated method stub//			if (mDevice.getName().indexOf("YDY_ROPE")!=-1) {//				setCharacteristicNotification(//						mDevice,//						UUID.fromString("00000a60-0000-1000-8000-00805f9b34fb"),//						UUID.fromString("00000a67-0000-1000-8000-00805f9b34fb"),//						true);//				return;//			}//			if (mDevice.getName().indexOf("Electronic") != -1) {//				setCharacteristicNotification(//						mDevice,//						UUID.fromString("0000fff0-0000-1000-8000-00805f9b34fb"),//						UUID.fromString("0000fff4-0000-1000-8000-00805f9b34fb"),//						true);//				return;//			}////			 setCharacteristicNotification(mDevice,characteristic,true);		}		/*		 * 读取特征值 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onCharacteristicRead(android		 * .bluetooth.BluetoothGatt,		 * android.bluetooth.BluetoothGattCharacteristic, int)		 */		public void onCharacteristicRead(BluetoothGatt gatt,				android.bluetooth.BluetoothGattCharacteristic characteristic,				int status) {			if (status == BluetoothGatt.GATT_SUCCESS) {				broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);			} else {				Log.d(TAG, "onCharacteristicRead received: " + status);			}		}		/*		 * 特征值的变化 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onCharacteristicChanged(android		 * .bluetooth.BluetoothGatt,		 * android.bluetooth.BluetoothGattCharacteristic)		 */		public void onCharacteristicChanged(BluetoothGatt gatt,				android.bluetooth.BluetoothGattCharacteristic characteristic) {			broadcastUpdate(ACTION_DATA_AVAILABLE, characteristic);		}		/*		 * 读取信号 (non-Javadoc)		 * 		 * @see		 * android.bluetooth.BluetoothGattCallback#onReadRemoteRssi(android.		 * bluetooth.BluetoothGatt, int, int)		 */		public void onReadRemoteRssi(BluetoothGatt gatt, int rssi, int status) {			if (gatt.connect()) {				broadcastUpdate(ACTION_GAT_RSSI);				Log.i(TAG, "11111111111111111 onReadRemoteRssi  : " + rssi);			}		}	};	/**	 * 发送数据到广播	 * 	 * @param action	 */	private void broadcastUpdate(String action) {		Intent intent = new Intent(action);		sendBroadcast(intent);	}	/**	 * 发送带蓝牙信息的到广播	 * 	 * @param action	 * @param characteristic	 */	private void broadcastUpdate(String action,			BluetoothGattCharacteristic characteristic) {		Intent intent = new Intent(action);		final byte[] data = characteristic.getValue();		if (data != null && data.length > 0) {			Log.i(App.TAG, "---返回值=" + characteristic.getValue());			intent.putExtra(EXTRA_DATA, characteristic.getValue());			intent.putExtra(RFSTAR_CHARACTERISTIC_ID, characteristic.getUuid()					.toString());		} else {			Log.i(App.TAG, "------能跑到这吗？--数组为空！！");		}		sendBroadcast(intent);	}	public void readValue(BluetoothDevice device,			BluetoothGattCharacteristic characteristic) {		// TODO Auto-generated method stub		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			Log.i("", "kBluetoothGatt 为没有初始化，所以不能读取数据");			return;		}		gatt.readCharacteristic(characteristic);		// this.bleGattCallback.onCharacteristicRead(gatt, characteristic,		// BluetoothGatt.GATT_SUCCESS);	}	public void writeValue(BluetoothDevice device,			BluetoothGattCharacteristic characteristic) {		// TODO Auto-generated method stub		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			Log.i(TAG, "kBluetoothGatt 为没有初始化，所以不能写入数据");			return;		}		// characteristic.setWriteType(3);		gatt.writeCharacteristic(characteristic);		Log.i(TAG, "-----------------------------发送成功！");	}	public void setCharacteristicNotification(BluetoothDevice device,			BluetoothGattCharacteristic characteristic, boolean enable) {		// TODO Auto-generated method stub		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			Log.i(TAG, "kBluetoothGatt 为没有初始化，所以不能发送使能数据");			return;		}		Log.i(App.TAG, "消息使能 success  : " + characteristic.getUuid().toString()				+ " " + enable);		// 设置当指定characteristic值变化时，发出通知。		gatt.setCharacteristicNotification(characteristic, enable);	}	/**	 * 获取services	 * 	 * @return	 */	public List<BluetoothGattService> getSupportedGattServices(			BluetoothDevice device) {		BluetoothGatt gatt = this.getBluetoothGatt(device);		if (gatt == null) {			Log.w(TAG, "111111111111  services is null ");			return null;		}		return gatt.getServices();	}	// 从arrayGatts匹配出与device中address想同的BluetoothGatt	private static BluetoothGatt getBluetoothGatt(BluetoothDevice device) {		BluetoothGatt gatt = null;		for (BluetoothGatt tmpGatt : arrayGatts) {			if (tmpGatt.getDevice().getAddress().equals(device.getAddress())) {				gatt = tmpGatt;					}		}				return gatt;	}	@SuppressLint("NewApi")	public boolean setCharacteristicNotification(BluetoothDevice device,			UUID serviceUuid, UUID characteristicUuid, boolean enable) {		BluetoothGatt mConnGatt = getBluetoothGatt(mDevice);		BluetoothGattCharacteristic characteristic = mConnGatt.getService(				serviceUuid).getCharacteristic(characteristicUuid);		mConnGatt.setCharacteristicNotification(characteristic, enable);		BluetoothGattDescriptor descriptor = characteristic				.getDescriptor(CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID);		descriptor				.setValue(enable ? BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE						: new byte[] { 0x00, 0x00 });		return mConnGatt.writeDescriptor(descriptor); // descriptor write	}}